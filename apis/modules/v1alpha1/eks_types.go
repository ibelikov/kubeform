/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"

	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EKS struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EKSSpec   `json:"spec,omitempty"`
	Status            EKSStatus `json:"status,omitempty"`
}

type EKSSpec struct {
	// +optional
	SecretRef   *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
	ProviderRef core.LocalObjectReference  `json:"providerRef" tf:"-"`
	// +optional
	Source string `json:"source" tf:"source"`

	// +optional
	// Whether to attach the Amazon managed `AmazonEKS_CNI_Policy` IAM policy to the default worker IAM role. WARNING: If set `false` the permissions must be assigned to the `aws-node` DaemonSet pods via another method or nodes will not be able to join the cluster.
	AttachWorkerCniPolicy bool `json:"attachWorkerCniPolicy,omitempty" tf:"attach_worker_cni_policy,omitempty"`
	// +optional
	// Whether to create a security group for the cluster or attach the cluster to `cluster_security_group_id`.
	ClusterCreateSecurityGroup bool `json:"clusterCreateSecurityGroup,omitempty" tf:"cluster_create_security_group,omitempty"`
	// +optional
	// Timeout value when creating the EKS cluster.
	ClusterCreateTimeout string `json:"clusterCreateTimeout,omitempty" tf:"cluster_create_timeout,omitempty"`
	// +optional
	// Timeout value when deleting the EKS cluster.
	ClusterDeleteTimeout string `json:"clusterDeleteTimeout,omitempty" tf:"cluster_delete_timeout,omitempty"`
	// +optional
	// A list of the desired control plane logging to enable. For more information, see Amazon EKS Control Plane Logging documentation (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)
	ClusterEnabledLogTypes []string `json:"clusterEnabledLogTypes,omitempty" tf:"cluster_enabled_log_types,omitempty"`
	// +optional
	// Configuration block with encryption configuration for the cluster. See examples/secrets_encryption/main.tf for example format
	ClusterEncryptionConfig []EKSClusterEncryptionConfig `json:"clusterEncryptionConfig,omitempty" tf:"cluster_encryption_config,omitempty"`
	// +optional
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
	ClusterEndpointPrivateAccess bool `json:"clusterEndpointPrivateAccess,omitempty" tf:"cluster_endpoint_private_access,omitempty"`
	// +optional
	// List of CIDR blocks which can access the Amazon EKS private API server endpoint, when public access is disabled
	ClusterEndpointPrivateAccessCidrs []string `json:"clusterEndpointPrivateAccessCidrs,omitempty" tf:"cluster_endpoint_private_access_cidrs,omitempty"`
	// +optional
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
	ClusterEndpointPublicAccess bool `json:"clusterEndpointPublicAccess,omitempty" tf:"cluster_endpoint_public_access,omitempty"`
	// +optional
	// List of CIDR blocks which can access the Amazon EKS public API server endpoint.
	ClusterEndpointPublicAccessCidrs []string `json:"clusterEndpointPublicAccessCidrs,omitempty" tf:"cluster_endpoint_public_access_cidrs,omitempty"`
	// +optional
	// IAM role name for the cluster. Only applicable if manage_cluster_iam_resources is set to false.
	ClusterIamRoleName string `json:"clusterIamRoleName,omitempty" tf:"cluster_iam_role_name,omitempty"`
	// +optional
	// If a KMS Key ARN is set, this key will be used to encrypt the corresponding log group. Please be sure that the KMS Key has an appropriate key policy (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)
	ClusterLogKmsKeyID string `json:"clusterLogKmsKeyID,omitempty" tf:"cluster_log_kms_key_id,omitempty"`
	// +optional
	// Number of days to retain log events. Default retention - 90 days.
	ClusterLogRetentionInDays json.Number `json:"clusterLogRetentionInDays,omitempty" tf:"cluster_log_retention_in_days,omitempty"`
	// +optional
	// Name of the EKS cluster. Also used as a prefix in names of related resources.
	ClusterName string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`
	// +optional
	// If provided, the EKS cluster will be attached to this security group. If not given, a security group will be created with necessary ingress/egress to work with the workers
	ClusterSecurityGroupID string `json:"clusterSecurityGroupID,omitempty" tf:"cluster_security_group_id,omitempty"`
	// +optional
	// Kubernetes version to use for the EKS cluster.
	ClusterVersion string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`
	// +optional
	// Where to save the Kubectl config file (if `write_kubeconfig = true`). Assumed to be a directory if the value ends with a forward slash `/`.
	ConfigOutputPath string `json:"configOutputPath,omitempty" tf:"config_output_path,omitempty"`
	// +optional
	// Controls if EKS resources should be created (it affects almost all resources)
	CreateEks bool `json:"createEks,omitempty" tf:"create_eks,omitempty"`
	// +optional
	// Thumbprint of Root CA for EKS OIDC, Valid until 2037
	EksOidcRootCaThumbprint string `json:"eksOidcRootCaThumbprint,omitempty" tf:"eks_oidc_root_ca_thumbprint,omitempty"`
	// +optional
	// Whether to create OpenID Connect Provider for EKS to enable IRSA
	EnableIrsa bool `json:"enableIrsa,omitempty" tf:"enable_irsa,omitempty"`
	// +optional
	// If provided, all IAM roles will be created on this path.
	IamPath string `json:"iamPath,omitempty" tf:"iam_path,omitempty"`
	// +optional
	// Any additional arguments to pass to the authenticator such as the role to assume. e.g. ["-r", "MyEksRole"].
	KubeconfigAwsAuthenticatorAdditionalArgs []string `json:"kubeconfigAwsAuthenticatorAdditionalArgs,omitempty" tf:"kubeconfig_aws_authenticator_additional_args,omitempty"`
	// +optional
	// Command to use to fetch AWS EKS credentials.
	KubeconfigAwsAuthenticatorCommand string `json:"kubeconfigAwsAuthenticatorCommand,omitempty" tf:"kubeconfig_aws_authenticator_command,omitempty"`
	// +optional
	// Default arguments passed to the authenticator command. Defaults to [token -i $cluster_name].
	KubeconfigAwsAuthenticatorCommandArgs []string `json:"kubeconfigAwsAuthenticatorCommandArgs,omitempty" tf:"kubeconfig_aws_authenticator_command_args,omitempty"`
	// +optional
	// Environment variables that should be used when executing the authenticator. e.g. { AWS_PROFILE = "eks"}.
	KubeconfigAwsAuthenticatorEnvVariables map[string]string `json:"kubeconfigAwsAuthenticatorEnvVariables,omitempty" tf:"kubeconfig_aws_authenticator_env_variables,omitempty"`
	// +optional
	// Override the default name used for items kubeconfig.
	KubeconfigName string `json:"kubeconfigName,omitempty" tf:"kubeconfig_name,omitempty"`
	// +optional
	// Whether to apply the aws-auth configmap file.
	ManageAwsAuth json.RawMessage `json:"manageAwsAuth,omitempty" tf:"manage_aws_auth,omitempty"`
	// +optional
	// Whether to let the module manage cluster IAM resources. If set to false, cluster_iam_role_name must be specified.
	ManageClusterIamResources bool `json:"manageClusterIamResources,omitempty" tf:"manage_cluster_iam_resources,omitempty"`
	// +optional
	// Whether to let the module manage worker IAM resources. If set to false, iam_instance_profile_name must be specified for workers.
	ManageWorkerIamResources bool `json:"manageWorkerIamResources,omitempty" tf:"manage_worker_iam_resources,omitempty"`
	// +optional
	// Additional AWS account numbers to add to the aws-auth configmap. See examples/basic/variables.tf for example format.
	MapAccounts []string `json:"mapAccounts,omitempty" tf:"map_accounts,omitempty"`
	// +optional
	// Additional IAM roles to add to the aws-auth configmap. See examples/basic/variables.tf for example format.
	MapRoles []EKSMapRoles `json:"mapRoles,omitempty" tf:"map_roles,omitempty"`
	// +optional
	// Additional IAM users to add to the aws-auth configmap. See examples/basic/variables.tf for example format.
	MapUsers []EKSMapUsers `json:"mapUsers,omitempty" tf:"map_users,omitempty"`
	// +optional
	// Map of map of node groups to create. See `node_groups` module's documentation for more details
	NodeGroups json.RawMessage `json:"nodeGroups,omitempty" tf:"node_groups,omitempty"`
	// +optional
	// Map of values to be applied to all node groups. See `node_groups` module's documentaton for more details
	NodeGroupsDefaults json.RawMessage `json:"nodeGroupsDefaults,omitempty" tf:"node_groups_defaults,omitempty"`
	// +optional
	// If provided, all IAM roles will be created with this permissions boundary attached.
	PermissionsBoundary string `json:"permissionsBoundary,omitempty" tf:"permissions_boundary,omitempty"`
	// +optional
	// A list of subnets to place the EKS cluster and workers within.
	Subnets []string `json:"subnets,omitempty" tf:"subnets,omitempty"`
	// +optional
	// A map of tags to add to all resources.
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
	// +optional
	// VPC where the cluster and workers will be deployed.
	VpcID string `json:"vpcID,omitempty" tf:"vpc_id,omitempty"`
	// +optional
	// Custom local-exec command to execute for determining if the eks cluster is healthy. Cluster endpoint will be available as an environment variable called ENDPOINT
	WaitForClusterCmd string `json:"waitForClusterCmd,omitempty" tf:"wait_for_cluster_cmd,omitempty"`
	// +optional
	// Custom local-exec command line interpreter for the command to determining if the eks cluster is healthy.
	WaitForClusterInterpreter []string `json:"waitForClusterInterpreter,omitempty" tf:"wait_for_cluster_interpreter,omitempty"`
	// +optional
	// A list of additional security group ids to attach to worker instances
	WorkerAdditionalSecurityGroupIDS []string `json:"workerAdditionalSecurityGroupIDS,omitempty" tf:"worker_additional_security_group_ids,omitempty"`
	// +optional
	// Name filter for AWS EKS worker AMI. If not provided, the latest official AMI for the specified 'cluster_version' is used.
	WorkerAmiNameFilter string `json:"workerAmiNameFilter,omitempty" tf:"worker_ami_name_filter,omitempty"`
	// +optional
	// Name filter for AWS EKS Windows worker AMI. If not provided, the latest official AMI for the specified 'cluster_version' is used.
	WorkerAmiNameFilterWindows string `json:"workerAmiNameFilterWindows,omitempty" tf:"worker_ami_name_filter_windows,omitempty"`
	// +optional
	// The ID of the owner for the AMI to use for the AWS EKS workers. Valid values are an AWS account ID, 'self' (the current account), or an AWS owner alias (e.g. 'amazon', 'aws-marketplace', 'microsoft').
	WorkerAmiOwnerID string `json:"workerAmiOwnerID,omitempty" tf:"worker_ami_owner_id,omitempty"`
	// +optional
	// The ID of the owner for the AMI to use for the AWS EKS Windows workers. Valid values are an AWS account ID, 'self' (the current account), or an AWS owner alias (e.g. 'amazon', 'aws-marketplace', 'microsoft').
	WorkerAmiOwnerIDWindows string `json:"workerAmiOwnerIDWindows,omitempty" tf:"worker_ami_owner_id_windows,omitempty"`
	// +optional
	// Whether to create security group rules to allow communication between pods on workers and pods using the primary cluster security group.
	WorkerCreateClusterPrimarySecurityGroupRules bool `json:"workerCreateClusterPrimarySecurityGroupRules,omitempty" tf:"worker_create_cluster_primary_security_group_rules,omitempty"`
	// +optional
	// Whether to create initial lifecycle hooks provided in worker groups.
	WorkerCreateInitialLifecycleHooks bool `json:"workerCreateInitialLifecycleHooks,omitempty" tf:"worker_create_initial_lifecycle_hooks,omitempty"`
	// +optional
	// Whether to create a security group for the workers or attach the workers to `worker_security_group_id`.
	WorkerCreateSecurityGroup bool `json:"workerCreateSecurityGroup,omitempty" tf:"worker_create_security_group,omitempty"`
	// +optional
	// A list of maps defining worker group configurations to be defined using AWS Launch Configurations. See workers_group_defaults for valid keys.
	WorkerGroups json.RawMessage `json:"workerGroups,omitempty" tf:"worker_groups,omitempty"`
	// +optional
	// A list of maps defining worker group configurations to be defined using AWS Launch Templates. See workers_group_defaults for valid keys.
	WorkerGroupsLaunchTemplate json.RawMessage `json:"workerGroupsLaunchTemplate,omitempty" tf:"worker_groups_launch_template,omitempty"`
	// +optional
	// If provided, all workers will be attached to this security group. If not given, a security group will be created with necessary ingress/egress to work with the EKS cluster.
	WorkerSecurityGroupID string `json:"workerSecurityGroupID,omitempty" tf:"worker_security_group_id,omitempty"`
	// +optional
	// Minimum port number from which pods will accept communication. Must be changed to a lower value if some pods in your cluster will expose a port lower than 1025 (e.g. 22, 80, or 443).
	WorkerSgIngressFromPort json.Number `json:"workerSgIngressFromPort,omitempty" tf:"worker_sg_ingress_from_port,omitempty"`
	// +optional
	// Additional policies to be added to workers
	WorkersAdditionalPolicies []string `json:"workersAdditionalPolicies,omitempty" tf:"workers_additional_policies,omitempty"`
	// +optional
	// Override default values for target groups. See workers_group_defaults_defaults in local.tf for valid keys.
	WorkersGroupDefaults json.RawMessage `json:"workersGroupDefaults,omitempty" tf:"workers_group_defaults,omitempty"`
	// +optional
	// User defined workers role name.
	WorkersRoleName string `json:"workersRoleName,omitempty" tf:"workers_role_name,omitempty"`
	// +optional
	// Whether to write a Kubectl config file containing the cluster configuration. Saved to `config_output_path`.
	WriteKubeconfig bool `json:"writeKubeconfig,omitempty" tf:"write_kubeconfig,omitempty"`
}

type EKSClusterEncryptionConfig struct {
	// +optional
	//
	ProviderKeyArn string `json:"providerKeyArn,omitempty" tf:"provider_key_arn,omitempty"`
	// +optional
	//
	Resources []string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type EKSMapRoles struct {
	// +optional
	//
	Groups []string `json:"groups,omitempty" tf:"groups,omitempty"`
	// +optional
	//
	Rolearn string `json:"rolearn,omitempty" tf:"rolearn,omitempty"`
	// +optional
	//
	Username string `json:"username,omitempty" tf:"username,omitempty"`
}

type EKSMapUsers struct {
	// +optional
	//
	Groups []string `json:"groups,omitempty" tf:"groups,omitempty"`
	// +optional
	//
	Userarn string `json:"userarn,omitempty" tf:"userarn,omitempty"`
	// +optional
	//
	Username string `json:"username,omitempty" tf:"username,omitempty"`
}

type EKSOutput struct {
	// Name of cloudwatch log group created
	// +optional
	CloudwatchLogGroupName string `json:"cloudwatchLogGroupName" tf:"cloudwatch_log_group_name"`
	// The Amazon Resource Name (ARN) of the cluster.
	// +optional
	ClusterArn string `json:"clusterArn" tf:"cluster_arn"`
	// Nested attribute containing certificate-authority-data for your cluster. This is the base64 encoded certificate data required to communicate with your cluster.
	// +optional
	ClusterCertificateAuthorityData string `json:"clusterCertificateAuthorityData" tf:"cluster_certificate_authority_data"`
	// The endpoint for your EKS Kubernetes API.
	// +optional
	ClusterEndpoint string `json:"clusterEndpoint" tf:"cluster_endpoint"`
	// IAM role ARN of the EKS cluster.
	// +optional
	ClusterIamRoleArn string `json:"clusterIamRoleArn" tf:"cluster_iam_role_arn"`
	// IAM role name of the EKS cluster.
	// +optional
	ClusterIamRoleName string `json:"clusterIamRoleName" tf:"cluster_iam_role_name"`
	// The name/id of the EKS cluster.
	// +optional
	ClusterID string `json:"clusterID" tf:"cluster_id"`
	// The URL on the EKS cluster OIDC Issuer
	// +optional
	ClusterOidcIssuerURL string `json:"clusterOidcIssuerURL" tf:"cluster_oidc_issuer_url"`
	// The cluster primary security group ID created by the EKS cluster on 1.14 or later. Referred to as 'Cluster security group' in the EKS console.
	// +optional
	ClusterPrimarySecurityGroupID string `json:"clusterPrimarySecurityGroupID" tf:"cluster_primary_security_group_id"`
	// Security group ID attached to the EKS cluster. On 1.14 or later, this is the 'Additional security groups' in the EKS console.
	// +optional
	ClusterSecurityGroupID string `json:"clusterSecurityGroupID" tf:"cluster_security_group_id"`
	// The Kubernetes server version for the EKS cluster.
	// +optional
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`
	// A kubernetes configuration to authenticate to this EKS cluster.
	// +optional
	ConfigMapAwsAuth string `json:"configMapAwsAuth" tf:"config_map_aws_auth"`
	// kubectl config file contents for this EKS cluster.
	// +optional
	Kubeconfig string `json:"kubeconfig" tf:"kubeconfig"`
	// The filename of the generated kubectl config.
	// +optional
	KubeconfigFilename string `json:"kubeconfigFilename" tf:"kubeconfig_filename"`
	// Outputs from EKS node groups. Map of maps, keyed by var.node_groups keys
	// +optional
	NodeGroups string `json:"nodeGroups" tf:"node_groups"`
	// The ARN of the OIDC Provider if `enable_irsa = true`.
	// +optional
	OidcProviderArn string `json:"oidcProviderArn" tf:"oidc_provider_arn"`
	// Security group rule responsible for allowing pods to communicate with the EKS cluster API.
	// +optional
	SecurityGroupRuleClusterHTTPSWorkerIngress string `json:"securityGroupRuleClusterHTTPSWorkerIngress" tf:"security_group_rule_cluster_https_worker_ingress"`
	// default IAM instance profile ARN for EKS worker groups
	// +optional
	WorkerIamInstanceProfileArns string `json:"workerIamInstanceProfileArns" tf:"worker_iam_instance_profile_arns"`
	// default IAM instance profile name for EKS worker groups
	// +optional
	WorkerIamInstanceProfileNames string `json:"workerIamInstanceProfileNames" tf:"worker_iam_instance_profile_names"`
	// default IAM role ARN for EKS worker groups
	// +optional
	WorkerIamRoleArn string `json:"workerIamRoleArn" tf:"worker_iam_role_arn"`
	// default IAM role name for EKS worker groups
	// +optional
	WorkerIamRoleName string `json:"workerIamRoleName" tf:"worker_iam_role_name"`
	// Security group ID attached to the EKS workers.
	// +optional
	WorkerSecurityGroupID string `json:"workerSecurityGroupID" tf:"worker_security_group_id"`
	// IDs of the autoscaling groups containing workers.
	// +optional
	WorkersAsgArns string `json:"workersAsgArns" tf:"workers_asg_arns"`
	// Names of the autoscaling groups containing workers.
	// +optional
	WorkersAsgNames string `json:"workersAsgNames" tf:"workers_asg_names"`
	// ID of the default worker group AMI
	// +optional
	WorkersDefaultAmiID string `json:"workersDefaultAmiID" tf:"workers_default_ami_id"`
	// ARNs of the worker launch templates.
	// +optional
	WorkersLaunchTemplateArns string `json:"workersLaunchTemplateArns" tf:"workers_launch_template_arns"`
	// IDs of the worker launch templates.
	// +optional
	WorkersLaunchTemplateIDS string `json:"workersLaunchTemplateIDS" tf:"workers_launch_template_ids"`
	// Latest versions of the worker launch templates.
	// +optional
	WorkersLaunchTemplateLatestVersions string `json:"workersLaunchTemplateLatestVersions" tf:"workers_launch_template_latest_versions"`
	// User data of worker groups
	// +optional
	WorkersUserData string `json:"workersUserData" tf:"workers_user_data"`
}

type EKSStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *EKSOutput `json:"output,omitempty"`
	// +optional
	State string `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EKSList is a list of EKSs
type EKSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EKS CRD objects
	Items []EKS `json:"items,omitempty"`
}
